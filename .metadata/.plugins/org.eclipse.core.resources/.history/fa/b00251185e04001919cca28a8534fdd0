# -*-coding:utf-8 -*-
import numpy as np
import scipy.special
import neuralNetwork
import matplotlib.pyplot as plt
import imageio
import glob

"""
函数说明:使用自己手写数字测试
Parameters：
Returns:无
"""
def testMyOwnImages():
    our_own_dataset = []
    for image_file_name in glob.glob('my_own_images/2828_my_own_?.png'):
        #print ("loading ... ", image_file_name)
        label = int(image_file_name[-5:-4])
        img_array = imageio.imread(image_file_name, as_gray=True)
        # reshape from 28x28 to list of 784 values, invert values
        img_data  = 255.0 - img_array.reshape(784)
        # then scale data to range from 0.01 to 1.0
        img_data = (img_data / 255.0 * 0.99) + 0.01
        record = np.append(label,img_data)
        #print(record)
        our_own_dataset.append(record)
    
    itemNums = np.array(our_own_dataset).shape[0]
    for item in range(itemNums):
        correct_label = our_own_dataset[item][0]
        inputs = our_own_dataset[item][1:]
        
        outputs = n.query(inputs)
        label = np.argmax(outputs)
        if (label == correct_label):
            print ('correct_label:%r network says: %r match!' % (correct_label, label))
        else:
            print ('correct_label:%r network says: %r no match!' % (correct_label, label))
            
        plt.imshow(our_own_dataset[item][1:].reshape(28,28), cmap='Greys', interpolation='None')
        plt.show()


"""
函数说明: run the network backwards, given a label, see what image it produces
Parameters：
Returns:无
"""
def netWorkBackWards():
    plt.figure()
    for label in range(10):
        targets = np.zeros(output_nodes) + 0.01
        targets[label] = 0.99
        print(targets)
        image_data = n.backquery(targets)
        #创建一个或多个子图(subplot绘图区才能绘图)
        plt.subplot(2,5,label)
        plt.imshow(image_data.reshape(28,28), cmap='Greys', interpolation='None')
     
        #plt.imshow(image_data.reshape(28,28), cmap='Greys', interpolation='None')
        #plt.show()
    plt.show()

if __name__ == '__main__':
    # load the mnist training data CSV file into a list
    training_data_file = open("mnist_dataset/mnist_train_100.csv", 'r')
    training_data_list = training_data_file.readlines()
    training_data_file.close()
    
    # load the mnist test data CSV file into a list
    test_data_file = open("mnist_dataset/mnist_test_10.csv", 'r')
    test_data_list = test_data_file.readlines()
    test_data_file.close()
    
    """
    all_values1 = test_data_list[0].split(',')
    image_array = np.asfarray(all_values1[1:]).reshape((28,28))
    plt.imshow(image_array, cmap='Greys', interpolation='None')
    plt.show()
    """
    
    # number of input, hidden and output nodes
    input_nodes = 784
    hidden_nodes = 200
    output_nodes = 10
    learning_rate = 0.1
    epochs = 5
    
    # create instance of neural network
    n = neuralNetwork.neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)
    # train the neural network
    for e in range(epochs):
        # go through all records in the training data set
        for record in training_data_list:
            # split the record by the ',' commas
            all_values = record.split(',')
            # scale and shift the inputs
            inputs = (np.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
            # create the target output values (all 0.01, except the desired label which is 0.99)
            targets = np.zeros(output_nodes) + 0.01
            # all_values[0] is the target label for this record
            targets[int(all_values[0])] = 0.99
            n.train(inputs, targets)
    
    # test the neural network
    # scorecard for how well the network performs, initially empty
    scorecard = []
    # go through all the records in the test data set
    for record in test_data_list:
        # split the record by the ',' commas
        all_values = record.split(',')    
        # correct answer is first value
        correct_label = int(all_values[0])
        # scale and shift the inputs
        inputs = (np.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
        # query the network
        outputs = n.query(inputs)
        # the index of the highest value corresponds to the label
        label = np.argmax(outputs)
        # append correct or incorrect to list
        if (label == correct_label):
            # network's answer matches correct answer, add 1 to scorecard
            scorecard.append(1)
        else:
            # network's answer doesn't match correct answer, add 0 to scorecard
            scorecard.append(0)
    
    # calculate the performance score, the fraction of correct answers
    scorecard_array = np.asarray(scorecard)
    print('performance:%.3f%%' % float(scorecard_array.sum()*100 / (float)(scorecard_array.size)))
    
    #testMyOwnImages()
    
    netWorkBackWards()
    