# -*-coding:utf-8 -*-
import numpy as np
import scipy.special
import part2_neural_network
import matplotlib.pyplot as plt
import imageio
import glob


if __name__ == '__main__':
    # load the mnist training data CSV file into a list
    training_data_file = open("mnist_dataset/mnist_train_100.csv", 'r')
    training_data_list = training_data_file.readlines()
    training_data_file.close()
    
    # load the mnist test data CSV file into a list
    test_data_file = open("mnist_dataset/mnist_test_10.csv", 'r')
    test_data_list = test_data_file.readlines()
    test_data_file.close()
    
    all_values1 = test_data_list[0].split(',')
    image_array = np.asfarray(all_values1[1:]).reshape((28,28))
    plt.imshow(image_array, cmap='Greys', interpolation='None')
    plt.show()
    
    # number of input, hidden and output nodes
    input_nodes = 784
    hidden_nodes = 200
    output_nodes = 10
    learning_rate = 0.1
    
    # create instance of neural network
    n = part2_neural_network.neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)
    
    # train the neural network
    # epochs is the number of times the training data set is used for training
    epochs = 5
    for e in range(epochs):
        # go through all records in the training data set
        for record in training_data_list:
            # split the record by the ',' commas
            all_values = record.split(',')
            # scale and shift the inputs
            inputs = (np.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
            # create the target output values (all 0.01, except the desired label which is 0.99)
            targets = np.zeros(output_nodes) + 0.01
            # all_values[0] is the target label for this record
            targets[int(all_values[0])] = 0.99
            n.train(inputs, targets)
    
    # test the neural network
    # scorecard for how well the network performs, initially empty
    scorecard = []
    # go through all the records in the test data set
    for record in test_data_list:
        # split the record by the ',' commas
        all_values = record.split(',')    
        # correct answer is first value
        correct_label = int(all_values[0])
        # scale and shift the inputs
        inputs = (np.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
        # query the network
        outputs = n.query(inputs)
        # the index of the highest value corresponds to the label
        label = np.argmax(outputs)
        # append correct or incorrect to list
        if (label == correct_label):
            # network's answer matches correct answer, add 1 to scorecard
            scorecard.append(1)
        else:
            # network's answer doesn't match correct answer, add 0 to scorecard
            scorecard.append(0)
    
    # calculate the performance score, the fraction of correct answers
    scorecard_array = np.asarray(scorecard)
    print('performance:%.3f%%' % float(scorecard_array.sum()*100 / (float)(scorecard_array.size)))
    
    # our own image test data set
    our_own_dataset = []
    for image_file_name in glob.glob('my_own_images/2828_my_own_?.png'):
        print ("loading ... ", image_file_name)
        # use the filename to set the correct label
        label = int(image_file_name[-5:-4])
        # load image data from png files into an array
        img_array = imageio.imread(image_file_name, as_gray=True)
        # reshape from 28x28 to list of 784 values, invert values
        img_data  = 255.0 - img_array.reshape(784)
        # then scale data to range from 0.01 to 1.0
        img_data = (img_data / 255.0 * 0.99) + 0.01
        record = np.append(label,img_data)
        #print(record)
        our_own_dataset.append(record)
        
    # record to test
    item = 2
    # plot image
    plt.imshow(our_own_dataset[item][1:].reshape(28,28), cmap='Greys', interpolation='None')
    
    # correct answer is first value
    correct_label = our_own_dataset[item][0]
    # data is remaining values
    inputs = our_own_dataset[item][1:]
    
    # query the network
    outputs = n.query(inputs)
    print (outputs)
    
    # the index of the highest value corresponds to the label
    label = numpy.argmax(outputs)
    print("network says ", label)
    # append correct or incorrect to list
    if (label == correct_label):
        print ("match!")
    else:
        print ("no match!")
        pass
    
    