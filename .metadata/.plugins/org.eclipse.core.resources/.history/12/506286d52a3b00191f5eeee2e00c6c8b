# -*- coding: utf-8 -*-
import os
from keras.preprocessing import image
import numpy as np
from keras.applications.imagenet_utils import preprocess_input
from PIL import ImageFile
from PIL import Image
ImageFile.LOAD_TRUNCATED_IMAGES = True


image_dict = 
{'Alice': '0', 'Beth': '1', 'Cecil': '2', 'Cecil': '2', 'Cecil': '2'}

# this function is for read image,the input is directory name
def load_image(directory_name, target_size=(224, 224), load_count=None):
    image_dict = {}
    img_x = [] # this if for store all of the image data
    img_y = []
    image_label_count = 0;
    image_count = 0;
    
    for filename in os.listdir(directory_name):
        image_dict[filename] = 
    
        # this loop is for read each image in this foder,directory_name is the foder name with images.
        for filename in os.listdir(directory_name):
            #print(filename) #just for test
            #img is used to store the image data
            img_path = directory_name + "/" + filename
            #img = image.load_img(img_path, target_size=(204, 204))
            
            try:
                img = image.load_img(img_path)
            except:
                continue
            
            if img.size == (161, 81):
                continue
            
            width_height_tuple = (target_size[1], target_size[0])
            img = img.resize(width_height_tuple, Image.BICUBIC)
            
            x = image.img_to_array(img)
            x = np.expand_dims(x, axis=0)
            x = preprocess_input(x)
            img_x.append(x)
            img_y.append(1)
            count+=1
            
            if load_count is not None and load_count <= count:
                return img_x
        
        return img_x