# -*- coding: utf-8 -*-
from numpy import *
import operator
from blaze.partition import Dataset

def createDataSet(): #使用python导入数据
    group = array([[1.0,1.1], [1.0,1.0], [0,0], [0,0.1]])
    labels = ['A', 'A', 'B', 'B']
    return group, labels

def classify0(inX, dataSet, labels, k): #k-近邻算法
    #numpy函数shape[0]返回dataSet的行数
    dataSetSize = dataSet.shape[0]
    #在列向量方向上重复inX共1次(横向),行向量方向上重复inX共dataSetSize次(纵向)
    diffMat = tile(inX, (dataSetSize, 1)) - dataSet
    #二维特征相减后平方
    sqDiffMat = diffMat**2
    #sum()所有元素相加,sum(0)列相加,sum(1)行相加
    sqDistances = sqDiffMat.sum(axis=1)
    #开方,计算出距离
    distances = sqDistances**0.5
    #返回distances中元素从小到大排序后的索引值
    sortedDistIndices = distances.argsort()#排序，输出索引
    #定一个记录类别次数的字典
    classCount = {}
    for i in range(k):
        #取出前k个元素的类别
        voteIlabel = labels[sortedDistIndices[i]]
        #dict.get(key,default=None),字典的get()方法,返回指定键的值,如果值不在字典中返回默认值。
        #计算类别次数
        classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1
    #python3中用items()替换python2中的iteritems()
    #key=operator.itemgetter(1)根据字典的值进行排序
    #key=operator.itemgetter(0)根据字典的键进行排序
    #reverse降序排序字典
    sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)
    print(sortedClassCount)
    #返回次数最多的类别,即所要分类的类别
    return sortedClassCount[0][0]

def file2matrix(filename): #程序清单2-2 将文本记录转换到NumPy的解析程序
    fr = open(filename)
    arrayOLines = fr.readlines() #readlines() 自动将文件内容分析成一个行的列表; readline() 每次只读取一行;read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中
    numberOfLines = len(arrayOLines)
    returnMat = zeros((numberOfLines, 3))
    classLabelVector = []
    index = 0
    for line in arrayOLines:
        line = line.strip() #strip()，它返回的是字符串的副本，并删除前导和后缀字符
        listFromLine = line.split('\t') #split()：拆分字符串。通过指定分隔符对字符串进行切片，并返回分割后的字符串列表（list）
        returnMat[index,:] = listFromLine[0:3]
        classLabelVector.append(int(listFromLine[-1])) #-1表示最后一个
        index += 1
    return returnMat.classLabelVector


if __name__ == '__main__':
    group, labels = createDataSet()
    k = 3
    result = classify([0, 0], group, labels, 3)
    print(result)
